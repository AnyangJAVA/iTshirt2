--------------------Git 용어 정리---------------------------------

- Git : 버전 관리 시스템
- GitHub : Git으로 관리하는 프로젝트를 올려둘 수 있는 사이트입니다.
- GUI : 그래픽 유저 인터페이스, 즉 마우스로 클릭해서 사용하는 방식입니다.
- CLI : 커맨드 라인 인터페이스, 즉 명령어를 하나씩 입력하는 방식입니다.
- Git Bash : CLI 방식으로 Git을 사용할 수 있는 환경입니다.
- 커밋(commit) : 버전 관리를 통해 생성된 파일, 혹은 그 행위를 의미합니다.
- 로컬 저장소 : Git으로 버전 관리하는 내 컴퓨터 안의 폴더를 의미합니다.
- 원격 저장소 : GitHub에서 협업하는 공간(폴더)를 의미합니다.
- 레포지토리(repository) : 원격저장소를 의미합니다.
- 푸시(push) : 로컬저장소의 커밋(버전 관리한 파일)을 원격저장소로 올리는 것입니다.
- 풀(pull) : 원격저장소의 커밋을 로컬저장소에 내려받는 것입니다.
- 풀 리퀘스트(pull requests) : 관련된 모든 풀 리퀘스트를 볼 수 있습니다.
- .gitnore : 작업할 때 굳이 GitHub에 올릴 필요가 없는 파일들을 추가합니다.
- 클론(clone) : 원격저장소를 내 컴퓨터에 받아오고(로컬저장소 자동 생성됨), 소스트리에도 추가
- Add : 내 컴퓨터에서 이미 만든 로컬저장소를 소스트리에 추가
- Create : 내 컴퓨터의 폴더에 새로운 로컬저장소를 생성하기 (git init 과 같음)

소스 코드, 로그 용어
* 어떤 것이 최신 파일일지는 상황에 따라 다름
- [master] : 로컬 저장소 버전 (내가 그 후나, 그 전에 갖고 있는 내용)
- [origin/master] : 원격 저장소 버전(깃 허브에서 받은 내용)
--------------------------------------------------------------------------
하나의 버전을 만들기 위해 변경사항을 선택하는 과정이 애드(add)이고, 그렇게 선택한 변경사항을 하나로 묶어 버전으로
만드는 것이 커밋(commit)이다. 커밋은 변경사항만 부분적으로 저장하는 것이 아닌 변경된 파일이 통째로 저장되어 있습니다.

----------------------------git 명령어 -----------------------------------
git log  : 지금까지 만든 커밋을 모두 확인합니다.
git checkout ******** : checkout으로 원하는 지점으로 파일을 되돌립니다.
git checkout - : 가장 최근 커밋으로 돌아갑니다.


-----------------------Git Bash를 통해 연결-------------------------------
● 프로젝트 만들기 (로컬 저장소)
git init : 프로젝트 폴더를 초기화한다.
git config --global user.email "junh0328@naver.com" : 깃허브 계정 연결
git config --global user.name "junh0328" : 깃허브 이름 연결

git add README.txt : 커밋에 추가할 파일을 선택합니다.
git commit -m "사이트 설명 추가" : 설명과 함께 커밋합니다.
* [-m] 은 'messeage'의 약자입니다.

● 깃허브의 원격저장소와 연결하기
git remote add origin https://github.com/junh0328/iTshirt2.git : 깃허브에 원격저장소로 사용될 레포지토리와 연결합니다.
git push origin master : 완료된 커밋을 origin[원격 저장소]에 master[default 값]로 등록합니다.

● 깃허브의 원격저장소의 커밋을 로컬 저장소에 내려받기
로컬 저장소에 커밋을 클론받을 폴더로 이동하여 Git Bash를 엽니다.
git clone https://github.com/junh0328/iTshirt2.git . (한칸 띄고 마침표) : 원격저장소의 주소에서 해당 커밋을 클론합니다.
--------------------Git 용어 정리---------------------------------

- Git : 버전 관리 시스템
- GitHub : Git으로 관리하는 프로젝트를 올려둘 수 있는 사이트입니다.
- GUI(graphic user interface) : 그래픽 유저 인터페이스, 즉 마우스로 클릭해서 사용하는 방식입니다.
- CLI(command-line interface) : 커맨드 라인 인터페이스, 즉 명령어를 하나씩 입력하는 방식입니다.
- Git Bash : CLI 방식으로 Git을 사용할 수 있는 환경입니다.
- 커밋(commit) : 버전 관리를 통해 생성된 파일, 혹은 그 행위를 의미합니다.
- 로컬 저장소 : Git으로 버전 관리하는 내 컴퓨터 안의 폴더를 의미합니다.
- 원격 저장소 : GitHub에서 협업하는 공간(폴더)를 의미합니다.
- 레포지토리(repository) : 원격저장소를 의미합니다.
- 푸시(push) : 로컬저장소의 커밋(버전 관리한 파일)을 원격저장소로 올리는 것입니다.
- 풀(pull) : 원격저장소의 커밋을 로컬저장소에 내려받는 것입니다.
- 풀 리퀘스트(pull requests) : 관련된 모든 풀 리퀘스트를 볼 수 있습니다.
- .gitnore : 작업할 때 굳이 GitHub에 올릴 필요가 없는 파일들을 추가합니다.
- 클론(clone) : 원격저장소를 내 컴퓨터에 받아오고(로컬저장소 자동 생성됨), 소스트리에도 추가
- Add : 내 컴퓨터에서 이미 만든 로컬저장소를 소스트리에 추가
- Create : 내 컴퓨터의 폴더에 새로운 로컬저장소를 생성하기 (git init 과 같음)
- branch : 브랜치(=나뭇가지)를 만듭니다.
- checkout : 브랜치를 이동합니다.
- merge : 브랜치와 브랜치를 합칩니다.
- release : 버전이 업데이트됨을 알림을 동시에 서비스를 제공하는 상태
- fork : 남의 원본저장소를 내 계정의 원격저장소로 복사해오는 명령, 행동
--------------------------소스 코드, 로그 용어-------------------------
* 어떤 것이 최신 파일일지는 상황에 따라 다름
- [master] : 로컬 저장소 버전 (내가 그 후나, 그 전에 갖고 있는 내용), 깃이 제공하는 기본적인 브랜치입니다. 
	   길을 가리키는 포인터라고 생각하면 좋다.
- [origin/master] : 원격 저장소 버전(깃 허브에서 푸쉬된 가장 최근의 내용)
- [HEAD] 브랜치 혹은 커밋을 가리키는 포인터
-------------------------------오류 정리---------------------------------
untracked : 추적이 안되는 상태, 한 번도 커밋이 되지 않았을 수 있음
Detached HEAD : [master] 브랜치의 포인터와 [HEAD]가 떨어져있는 상태
-------------------------------뇌 정리-----------------------------------
1. 커밋
하나의 버전을 만들기 위해 변경사항을 선택하는 과정이 애드(add)이고, 그렇게 선택한 변경사항을 하나로 묶어 버전으로
만드는 것이 커밋(commit)이다. 커밋은 변경사항만 부분적으로 저장하는 것이 아닌 변경된 파일이 통째로 저장되어 있습니다.

2. 브랜치
분업할 때 한 파일에서 서로 다른 기능을 만들 때, 브랜치를(서로 다른 나뭇가지) 통해 기존의 마스터파일을 바로 변경하지 않고 
담아둘 수 있습니다. 후에 머지(merge)기능을 통해 브랜치와 기존의 마스터파일을 합칠 수 있습니다.

2.1) 브랜치 규칙
- [master] 브랜치에는 직접 커밋을 올리지 않는다.(동시에 작업하다 꼬일 수 있으므로)
- 기능 개발을 하기 전에 [master] 브랜치를 기준으로 새로운 브랜치를 만든다.
- 이 브랜치 이름은 [feature/기능이름] 형식으로 하고 한 명만 커밋을 올린다.
- [feature/기능이름] 브랜치에서 기능 개발이 끝나면 [master] 브랜치에 이를 합친다.

3. 병합(merge)

3.1.1 Merge commit [병합 커밋]
꽃을 든 문어 + 모자 쓴 문어 >> 꽃을 든 모자 쓴 문어
3.1.2 Fast-forward [빨리 감기]
문어 + 모자 쓴 문어 >> 모자 쓴 문어
3.1.3 conflict [충돌]
꽃을 든 초록 모자를 쓴 문어 + 검은 모자를 쓴 문어 >> 오류 (충돌이 난 상태, 무엇을 먼저 커밋할지 모르기 때문)
>> 충돌이 난 부분만 확인하고 무엇을 남길지 수동으로 선택 후에 병합한다.

3.2 브랜치 병합 커밋 및 충돌 해결
- 서로 다른 분기에 있는 브랜치를 커밋하면 충돌이 날 가능성이 있기 때문에 마스터 브랜치에 바로 병합하지 않고,
나만 쓰는 브랜치 [feature/cart] 브랜치에서 먼저 병합해 보고 문제가 없는지 확인합니다.

3.2.1
- 체크아웃을 통해 feature/cart 브랜치로 넘어갑니다.
- master 를 현재 분기로 병합시킵니다.
- 오류를 확인하고 수정 후에, 마스터 브랜치로 넘어가 재병합합니다.

3.3 브랜치를 합치는 예의바른 방법 : 풀 리퀘스트
풀 리퀘스트, 즉 정중하게 병합을 요청할 수 있는 메시지를 적을 수 있는 페이지가 나옵니다. 
여기서 서로 먼저 설정해야 할 건 베이스(base) 브랜치와 비교(compare) 브랜치입니다.

3.4 개발이 완료되었습니다, 출시하자! : 릴리즈(release)
- 메이저 업그레이드 (v2.x > v3.x) : 사용자들이 크게 느낄 변화를 적용했을 때
- 마이너 업그레이드 (v2.3 > v2.4) : 작은 변화 등이 생겼을 때
----------------------------git 명령어 -----------------------------------
git log  : 지금까지 만든 커밋을 모두 확인합니다.
git checkout ******** : checkout으로 원하는 지점으로 파일을 되돌립니다.
git checkout - : 가장 최근 커밋으로 돌아갑니다.


-----------------------Git Bash를 통해 연결-------------------------------
● 프로젝트 만들기 (로컬 저장소)
git init : 프로젝트 폴더를 초기화한다.
git config --global user.email "junh0328@naver.com" : 깃허브 계정 연결
git config --global user.name "junh0328" : 깃허브 이름 연결

git add README.txt : 커밋에 추가할 파일을 선택합니다.
git commit -m "사이트 설명 추가" : 설명과 함께 커밋합니다.
* [-m] 은 'messeage'의 약자입니다.

● 깃허브의 원격저장소와 연결하기
git remote add origin https://github.com/junh0328/iTshirt2.git : 깃허브에 원격저장소로 사용될 레포지토리와 연결합니다.
git push origin master : 완료된 커밋을 origin[원격 저장소]에 master[default 값]로 등록합니다.

● 깃허브의 원격저장소의 커밋을 로컬 저장소에 내려받기
로컬 저장소에 커밋을 클론받을 폴더로 이동하여 Git Bash를 엽니다.
git clone https://github.com/junh0328/iTshirt2.git . (한칸 띄고 마침표) : 원격저장소의 주소에서 해당 커밋을 클론합니다.